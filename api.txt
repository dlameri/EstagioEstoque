Categoria:

	@Path("/api/category")


	@GET
		retorna todas as categorias em ordem alfabética
	}

	@Path("/{id}")
	@GET
		retorna a categoria desejada
	}



Subategoria:
	@Path("/api/subcategory")


	@GET
		retorna todas as subcategorias em ordem alfabética
	}

	@Path("/{id}")
		retorna a categoria desejada
	}
	
	@Path("/category/{id}")
	@GET
		retorna todas as subcategorias de um determinada categoria
	}




Produto:
	@Path("/api/product")


	@GET
		retorna uma lista com os 20 primeiros produtos ativos ordenados pelo rank

		parametros que podem ser usados para personalizar a busca:
		orderColum="coluna que você deseja ordenar"  --  o nome da coluna deve ser o mesmo nome que está no json. default=rank
		order="asc" ou "desc" default=desc
		active="true", "false" ou "all" default=true  (qualquer outro valor vai ser "false")
		maxResults=de 1 a 50 -- define o maximo de resultados a ser exibido. se for mais de 50 vai retornar 50 e se for menor que 1 vai retornar 1. default = 20
	}

	@Path("/{id}")
	@GET
		retorna o produto desejado
	}

	@Path("/seach/{textToSeach}")
	@GET
		retorna uma lista de produtos que contenham o texto desejado no nome
	}
	
	@Path("/bycategoryid/{id}")
	@GET
		retorna uma lista de produtos da categoria desejada
	}
	
	@Path("/bysubcategoryid/{id}")
	@GET
		retorna uma lista de produtos da subcategoria desejada
	}

	@Path("/updatestock")
	@PUT
		da baixa no estoque
	}

	@Path("/orderbyrank")
	@GET
		retorna todos os produtos ordenados pelo maior rank
	}


Item:
	@Path("/api/item")


	@GET
		retorna todos os itens
	}

	@Path("/{id}")
	@GET
		retorna o item com o id desejado
	}
	
	@Path("/byproductid/{id}")
	@GET
		retorna os itens do produto correspondente
	}

	@Path("/orderbyrank")
	@GET
		retorna todos os itens ordenados pelo maior rank
	}


